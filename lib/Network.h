/*
* Copyright (c) 2013 Dan Ladley, Marc de Kamps <M.deKamps@leeds.ac.uk>
*
* Permission to use, copy, modify, and distribute this software for any
* purpose with or without fee is hereby granted, provided that the above
* copyright notice and this permission notice appear in all copies.
*
* THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
* WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
* ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
* WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
* ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
* OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
#ifndef _LIBS_AGENT_NETWORK
#define _LIBS_AGENT_NETWORK

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/io.hpp>
#include "BasicDefinitions.h"
#include "AbstractNetworkGenerator.h"

using namespace boost::numeric::ublas;

namespace AgentLib {

	//! Network contains the adjacency matrix of a given network structure. 
	//! It accepts various NetworkParameter objects that determine how the 
	//! adjacency matrix will be filled. It also serves as an interface to 
	//! ascii representations of network files that have been generated by other
	//! programs.

	class Network {
	public:

		//! Determine what kind of network you want by specifying the approprate NetworkParameter
		Network(const AbstractNetworkGenerator&);

		//! Dimension of the network (number of nodes)
		Number Dimension() const;

	private:

		matrix<double> _m;

	};
}

#endif // include guard
